"use strict";
var _;
(function (_) {
    _.lazy = (value) => isF(value) ? value() : value;
    function lazy2(data, key) {
        let t = data[key];
        return isF(t) ? (data[key] = t()) : t;
    }
    _.lazy2 = lazy2;
    _.is = (value, constructor) => value instanceof constructor;
    function isN(value) {
        return typeof value === 'number';
    }
    _.isN = isN;
    _.isS = (value) => typeof value === 'string';
    function isF(value) {
        return typeof value === 'function';
    }
    _.isF = isF;
    function isVS(str) {
        if (!str)
            return false;
        for (let i = 0; i < str.length; i++)
            if (str[i] != ' ')
                return false;
        return true;
    }
    _.isVS = isVS;
    ;
    _.t = (value) => value !== false;
    _.def = (value, def) => value === undefined ? def : value;
    _.isO = (value) => value && typeof value == 'object';
    _.isA = (value) => value instanceof Array;
    _.isU = (value) => value === void 0;
    _.isP = (value) => isF(value.then);
    _.isB = (value) => typeof value === 'boolean';
    function clone(obj) {
        if (typeof obj === 'object') {
            let nObj;
            if (obj instanceof Array) {
                nObj = Array(obj.length);
                for (let i = 0; i < obj.length; i++)
                    nObj[i] = clone(obj[i]);
            }
            else {
                nObj = {};
                for (let key in obj)
                    nObj[key] = clone(obj[key]);
            }
            obj = nObj;
        }
        return obj;
    }
    _.clone = clone;
    _.arr = (v) => _.isA(v) ? v : [v];
    _.has = (value, check) => (value & check) == check;
    function delay(index, cb, time = 500) {
        clearTimeout(index);
        return setTimeout(cb, time);
    }
    _.delay = delay;
    _.slip = (ms) => new Promise(resolve => setTimeout(resolve, ms));
    _.clamp = (value, min, max) => value < min ? min : value > max ? max : value;
    _.ex = (value, extension) => Object.assign(value, extension);
    function sgn(tgt, ...src) { return Object.assign(tgt, ...src); }
    _.sgn = sgn;
    function fn(v, cb) {
        cb(v);
        return v;
    }
    _.fn = fn;
    _.remove = (str, index, length) => str.slice(0, index) + str.slice(index + length);
    const check = (pattern, value) => ("" + value).toLowerCase().indexOf(pattern) >= 0;
    function query(pattern, list, ...fields) {
        let r = [];
        for (let item of list)
            if (item && (fields.length ? fields.some(f => check(pattern, item[f])) : check(pattern, item)))
                r.push(item);
        return r;
    }
    _.query = query;
    function binarySearch(ar, compareFn) {
        var m = 0;
        var n = ar.length - 1;
        while (m <= n) {
            var index = (n + m) >> 1;
            var cmp = compareFn(ar[index]);
            if (cmp > 0) {
                m = index + 1;
            }
            else if (cmp < 0) {
                n = index - 1;
            }
            else {
                return index;
            }
        }
        return -m - 1;
    }
    _.binarySearch = binarySearch;
    function extend(obj, extension) {
        for (let key in extension) {
            if (obj[key] === undefined)
                obj[key] = extension[key];
        }
        return obj;
    }
    _.extend = extend;
    function deepExtend(obj, extension) {
        for (let key in extension) {
            let value2 = extension[key];
            if (obj[key] !== undefined) {
                let value1 = obj[key];
                if (value2 && value2.__proto__ == Object.prototype && value1 && value1.__proto__ == Object.prototype) {
                    deepExtend(value1, value2);
                }
            }
            else if (value2 && value2.__proto__ == Object.prototype)
                obj[key] = clone(value2);
            else
                obj[key] = value2;
        }
        return obj;
    }
    _.deepExtend = deepExtend;
    function prot(constructor, obj) {
        return Object.assign(new constructor(), obj);
    }
    _.prot = prot;
    function plain(src) {
        let t = [];
        for (let i of src)
            if (i)
                t.push(...i);
        return t;
    }
    _.plain = plain;
    function up(value) {
        return value && (value[0].toUpperCase() + value.slice(1).replace(/_/g, ' '));
    }
    _.up = up;
    function uuid(length = 32) {
        return Array
            .from({ length: length })
            .map(() => Math.round(Math.random() * 15).toString(16))
            .join('');
    }
    _.uuid = uuid;
    function fromForm(data) {
        var result = {};
        data.forEach((v, k) => result[k] = v);
        return result;
    }
    _.fromForm = fromForm;
    class ET {
        constructor() {
            this.__eh = {};
        }
        on(event, callback, options) {
            if (callback) {
                if (!(event in this.__eh)) {
                    this.__eh[event] = [];
                }
                if (options)
                    callback.options = options;
                this.__eh[event].push(callback);
            }
            return this;
        }
        off(event, callback) {
            if (event in this.__eh) {
                if (callback) {
                    var stack = this.__eh[event];
                    for (let i = 0, l = stack.length; i < l; i++) {
                        if (stack[i] === callback) {
                            stack.splice(i, 1);
                            return;
                        }
                    }
                }
                else
                    delete this.__eh[event];
            }
            return this;
        }
        trigger(event, data) {
            let stack = this.__eh[event];
            if (stack && stack.length) {
                for (let i = 0, l = stack.length; i < l; i++) {
                    let e = stack[i];
                    if (e.options) {
                        if (e.options.once)
                            stack.splice(i--, 1);
                        if (e.options.delay) {
                            setTimeout(() => {
                                e.call(this, data);
                            }, e.options.delay);
                            continue;
                        }
                    }
                    if (e.call(this, data) === false)
                        return false;
                }
            }
            else
                return -1;
            return true;
        }
    }
    _.ET = ET;
    function isEmpty(obj) {
        for (let _k in obj)
            return false;
        return true;
    }
    _.isEmpty = isEmpty;
    _.notImp = () => new Error("not implemented");
    _.notF = (key, itemTp, src, srcTp) => new Error(`${itemTp || 'item'} '${key}' not found` + (src ? ` in '${src}' ${srcTp}` : ''));
    _.inv = (key) => new Error(`invalid action`);
    function expand() {
        var _a, _b;
        (_a = String.prototype).padStart || (_a.padStart = function (length, pattern) {
            return this.length <= length ? this : (pattern.repeat(length - this.length) + this);
        });
        (_b = String.prototype).replaceAll || (_b.replaceAll = function (from, to) {
            return this.split(from).join(to);
        });
        Array.prototype.byKey = function (name, key = 'key') {
            for (let i = 0; i < this.length; i++)
                if (name === this[i][key])
                    return this[i];
            return null;
        };
        Array.prototype.sub = function (key) {
            var _a;
            let t = Array(this.length);
            for (let i = 0; i < this.length; i++)
                t[i] = (_a = this[i]) === null || _a === void 0 ? void 0 : _a[key];
            return t;
        };
        Object.defineProperties(Array.prototype, {
            a: {
                get() {
                    return this[0];
                },
                set(value) {
                    this[0] = value;
                }
            },
            z: {
                get() {
                    return this[this.length - 1];
                },
                set(value) {
                    this[this.length - 1] = value;
                }
            },
            l: {
                get() {
                    return this.length;
                },
                set(value) {
                    this.length = value;
                }
            }
        });
        Array.prototype.distinct = function () {
            return this.filter((f, i) => {
                return this.indexOf(f, i + 1) == -1;
            });
        };
        Array.prototype.valid = function () {
            return this.filter(v => v);
        };
        Array.prototype.indexByKey = function (name, key = 'key', i = 0) {
            for (; i < this.length; i++)
                if (name === this[i][key])
                    return i;
            return -1;
        };
        Array.prototype.dic = function (callback) {
            var result = {};
            for (let i = 0; i < this.length; i++) {
                let value = this[i];
                let temp = callback(value);
                result[temp[0]] = temp[1];
            }
            return result;
        };
        Array.prototype.add = function (...value) {
            this.push(...value);
            return this;
        };
        Array.prototype.put = function (index, ...value) {
            this.splice(index, 0, ...value);
            return this;
        };
        Array.prototype.cut = function (count) {
            let r = Array(Math.ceil(this.length / count));
            for (let i = 0; i < r.length;)
                r[i] = this.slice(i * count, ++i * count);
            return r;
        };
        Event && (Event.prototype.off = function () {
            this.stopImmediatePropagation();
            this.preventDefault();
        });
    }
    _.expand = expand;
})(_ || (_ = {}));
module.exports = _;
//# sourceMappingURL=data:application/json;base64,